import asyncio
import os

import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

from search import search_films

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("TOKEN"))  # –¢–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
dp = Dispatcher()


# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---

async def init_db():
    '''–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ history –∏ stats.'''
    async with aiosqlite.connect('bot.db') as db:
        # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤
        await db.execute('''CREATE TABLE IF NOT EXISTS history
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             user_id INTEGER,
                             query TEXT,
                             timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
        await db.execute('''CREATE TABLE IF NOT EXISTS stats
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             user_id INTEGER,
                             title TEXT,
                             count INTEGER DEFAULT 1,
                             UNIQUE(user_id, title))''')
        await db.commit()


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

async def show_history(message: types.Message, user_id: int):
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–æ–≤
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT query, timestamp FROM history WHERE user_id = ? ORDER BY timestamp DESC",
                              (user_id,)) as cursor:
            rows = await cursor.fetchall()

    text = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n" if rows else "ü•≤ –í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏."
    for row in rows[:20]:
        # text += f"{row[1]}: {row[0]}\n"
        text += f"<code>{row[0]}</code>\n"

    await message.reply(text, parse_mode="HTML")


async def show_stats(message: types.Message, user_id: int):
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT title, count FROM stats WHERE user_id = ? ORDER BY count DESC",
                              (user_id,)) as cursor:
            rows = await cursor.fetchall()

    text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞:\n" if rows else "ü•≤ –í—ã –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏."
    for row in rows[:20]:
        text += f"<code>{row[0]}</code>: {row[1]} —Ä–∞–∑(–∞)\n"

    await message.reply(text, parse_mode='HTML')


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command('start'))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.reply("Welcome to the movie search bot! You can search for movies and series by sending their names.")


@dp.message(Command('help'))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = ("Available commands:\n"
                 "/start - Start the bot\n"
                 "/help - Show this help message\n"
                 "/history - Show search history\n"
                 "/stats - Show film statistics\n"
                 "Send a movie or series name to search for it.")
    await message.reply(help_text)


@dp.message(Command('history'))
async def history_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history."""
    user_id = message.from_user.id
    await show_history(message, user_id)


@dp.message(Command('stats'))
async def stats_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats."""
    user_id = message.from_user.id
    await show_stats(message, user_id)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫) ---

from aiogram.types import InputMediaPhoto


@dp.message()
async def search_film(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ send_media_group."""

    RES_CNT = 5  # –ö–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–æ—Å–∫–µ, max=10

    query = message.text
    user_id = message.from_user.id

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏
    async with aiosqlite.connect('bot.db') as db:
        await db.execute("INSERT INTO history (user_id, query) VALUES (?, ?)", (user_id, query))
        await db.commit()

    searching = await message.reply(f"üîç –ò—â—É ¬´{query}¬ª...")
    films = await search_films(query)

    if not films:
        await bot.edit_message_text(text="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", chat_id=searching.chat.id,
            message_id=searching.message_id)
        return

    # –°–æ–±–∏—Ä–∞–µ–º mediagroup –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    media = []
    for film in films[:RES_CNT]:
        poster = film['posters'][0] if film['posters'] else None
        if poster:
            caption = (f"<b>{film['name']}</b> ({film['year']})\n"
                       f"‚≠ê KP: {film['rating_kp'] or 'N/A'} | üé¨ IMDB: {film['rating_imdb'] or 'N/A'}\n"
                       f"<a href=\"{film['links'][0] if film['links'] else '#'}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä</a>")
            media.append(InputMediaPhoto(media=poster, caption=caption, parse_mode='HTML'))

    # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–∏—â–µ–º¬ª
    await bot.edit_message_text(text="üêà –í–æ—Ç —á—Ç–æ —è –Ω–∞—à—ë–ª:", chat_id=searching.chat.id, message_id=searching.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º mediagroup
    if media:
        await bot.send_media_group(chat_id=message.chat.id, media=media)
    else:
        await message.reply("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î –ø–æ –Ω–∞–π–¥–µ–Ω—ã–º —Ñ–∏–ª—å–º–∞–º
    film_titles = [film['name'] for film in films[:RES_CNT]]
    async with aiosqlite.connect('bot.db') as db:
        for title in film_titles:
            await db.execute("""
                INSERT INTO stats (user_id, title, count) VALUES (?, ?, 1) ON CONFLICT(user_id, title) DO UPDATE SET count = count + 1
            """, (user_id, title))
        await db.commit()


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
dp.startup.register(init_db)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio
    asyncio.run(dp.start_polling(bot))
